<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chef Bot</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
    .ingredient-item {
      display: flex;
      align-items: center;
      padding: 16px;
      border-bottom: 1px solid #eee;
      transition: background-color 0.2s;
    }
    .ingredient-item:hover {
      background-color: #f9fafb;
    }
    .ingredient-name {
      flex: 1;
      font-weight: 500;
      color: #1f2937;
    }
    .quantity-control {
      display: flex;
      align-items: center;
      background: #f9fafb;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      margin: 0 12px;
      overflow: hidden;
    }
    .quantity-btn {
      cursor: pointer;
      padding: 8px 12px;
      background: transparent;
      border: none;
      transition: background-color 0.2s;
    }
    .quantity-btn:hover {
      background-color: #f3f4f6;
    }
    .quantity-value {
      padding: 0 16px;
      min-width: 40px;
      text-align: center;
      font-weight: 500;
    }
    .unit-select {
      padding: 8px 12px;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      background-color: white;
      font-size: 14px;
      color: #4b5563;
      appearance: none;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
      background-position: right 8px center;
      background-repeat: no-repeat;
      background-size: 16px 16px;
      padding-right: 32px;
    }
    .delete-btn {
      color: #9ca3af;
      cursor: pointer;
      padding: 8px;
      border-radius: 8px;
      transition: all 0.2s;
    }
    .delete-btn:hover {
      color: #ef4444;
      background-color: #fee2e2;
    }
    .add-form {
      display: flex;
      gap: 12px;
      padding: 16px;
    }
    .add-input {
      flex: 1;
      padding: 10px 16px;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      font-size: 14px;
    }
    .add-input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    .add-btn {
      background: #3b82f6;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 10px 16px;
      cursor: pointer;
      transition: background-color 0.2s;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .add-btn:hover {
      background: #2563eb;
    }
    .tab-content {
      background: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      border: 1px solid #e5e7eb;
      overflow: hidden;
    }
    .tab-header {
      padding: 24px;
      border-bottom: 1px solid #e5e7eb;
    }
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 48px 24px;
      color: #9ca3af;
    }
    .recipe-card {
      border: 1px solid #e5e7eb;
      border-radius: 12px;
      overflow: hidden;
    }
    .recipe-header {
      background-color: #eff6ff;
      padding: 16px 24px;
      border-bottom: 1px solid #dbeafe;
    }
    .recipe-content {
      padding: 24px;
    }
    .recipe-section {
      margin-bottom: 24px;
    }
    .recipe-section h4 {
      font-weight: 600;
      margin-bottom: 12px;
      color: #1f2937;
    }
    .recipe-list {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }
    .recipe-list li {
      padding: 8px 0;
      display: flex;
      align-items: flex-start;
    }
    .recipe-list li::before {
      content: "â€¢";
      color: #3b82f6;
      font-weight: bold;
      display: inline-block;
      width: 1em;
      margin-right: 8px;
    }
    .recipe-instructions {
      list-style-type: decimal;
      padding-left: 24px;
    }
    .recipe-instructions li {
      padding: 8px 0;
    }
    .missing-ingredient {
      color: #f59e0b;
    }
    .missing-ingredient::before {
      color: #f59e0b;
    }
    .loading-spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      width: 36px;
      height: 36px;
      border-radius: 50%;
      border-left-color: #3b82f6;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .error-message {
      background-color: #fee2e2;
      border: 1px solid #fecaca;
      color: #b91c1c;
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-b from-blue-50 to-white">
  <!-- Header -->
  <header class="bg-white shadow-sm">
    <div class="max-w-5xl mx-auto px-4 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-3">
          <div class="w-10 h-10 flex items-center justify-center bg-blue-100 text-blue-600 rounded-lg">
            <i class="fas fa-utensils text-xl"></i>
          </div>
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Chef Bot</h1>
            <p class="text-sm text-gray-500">Your AI-powered cooking assistant</p>
          </div>
        </div>
        <div id="auth-container">
          <!-- Login button when not authenticated -->
          <div id="login-container" class="flex items-center gap-2">
            <div id="google-signin-button"></div>
          </div>
          
          <!-- Profile info when authenticated -->
          <div id="profile-container" class="flex items-center gap-3 hidden">
            <div class="flex flex-col items-end">
              <span id="user-name" class="text-sm font-medium text-gray-900"></span>
              <button id="logout-btn" class="text-xs text-blue-600 hover:text-blue-800">Sign out</button>
            </div>
            <img id="user-avatar" class="w-8 h-8 rounded-full" src="" alt="User avatar">
          </div>
        </div>
      </div>
    </div>
  </header>

  <!-- Navigation -->
  <nav class="bg-white border-b">
    <div class="max-w-5xl mx-auto px-4">
      <div class="flex space-x-8">
        <button
          id="inventory-tab"
          class="py-4 px-3 border-b-2 border-blue-500 text-blue-600 font-medium text-sm"
        >
          Kitchen Inventory
        </button>
        <button
          id="suggestions-tab"
          class="py-4 px-3 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm"
        >
          Recipe Suggestions
        </button>
        <button
          id="saved-recipes-tab"
          class="py-4 px-3 border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 font-medium text-sm auth-required"
        >
          Saved Recipes
        </button>
      </div>
    </div>
  </nav>

  <!-- Error message -->
  <div id="error-container" class="max-w-5xl mx-auto px-4 py-2 mt-4 hidden">
    <div class="error-message">
      <i class="fas fa-exclamation-circle"></i>
      <span id="error-message"></span>
    </div>
  </div>

  <!-- Main Content -->
  <main class="max-w-5xl mx-auto px-4 py-8">
    <!-- Inventory Tab -->
    <div id="inventory-content" class="tab-content">
      <div class="tab-header">
        <h2 class="text-lg font-semibold text-gray-900">Available Ingredients</h2>
        <p class="mt-1 text-sm text-gray-500">Manage your kitchen inventory</p>
      </div>

      <div id="ingredients-container">
        <!-- Ingredients will be loaded here -->
        <div id="ingredients-list">
          <div class="p-6 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <p class="text-gray-500">Loading ingredients...</p>
          </div>
        </div>
      </div>

      <div class="add-form">
        <input
          type="text"
          id="new-ingredient-name"
          placeholder="Add new ingredient"
          class="add-input"
        />
        <input
          type="number"
          id="new-ingredient-quantity"
          value="1"
          min="0.1"
          step="0.1"
          class="add-input w-20"
        />
        <select
          id="new-ingredient-unit"
          class="unit-select"
        >
          <option value="pieces">pieces</option>
          <option value="grams">grams</option>
          <option value="kg">kg</option>
          <option value="ml">ml</option>
          <option value="liters">liters</option>
          <option value="cups">cups</option>
          <option value="tbsp">tbsp</option>
          <option value="tsp">tsp</option>
        </select>
        <button
          id="add-ingredient-btn"
          class="add-btn"
        >
          <i class="fas fa-plus"></i>
          <span>Add</span>
        </button>
      </div>
    </div>

    <!-- Recipe Suggestions Tab -->
    <div id="suggestions-content" class="tab-content hidden">
      <div class="tab-header">
        <h2 class="text-lg font-semibold text-gray-900">Recipe Suggestions</h2>
        <p class="mt-1 text-sm text-gray-500">Get recipe ideas based on your ingredients</p>
      </div>

      <div class="p-6">
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Number of Servings</label>
          <div class="flex gap-3 items-center">
            <select
              id="servings-select"
              class="unit-select"
            >
              <option value="1">1 serving</option>
              <option value="2">2 servings</option>
              <option value="3">3 servings</option>
              <option value="4">4 servings</option>
              <option value="5">5 servings</option>
              <option value="6">6 servings</option>
              <option value="7">7 servings</option>
              <option value="8">8 servings</option>
              <option value="9">9 servings</option>
              <option value="10">10 servings</option>
            </select>
            <button
              id="get-recipe-btn"
              class="add-btn"
            >
              <i class="fas fa-search"></i>
              <span>Get Recipe Suggestion</span>
            </button>
          </div>
        </div>

        <div id="recipe-container">
          <!-- Recipe will be loaded here -->
          <div class="empty-state">
            <i class="fas fa-book text-5xl mb-4"></i>
            <p class="text-lg">Get recipe suggestions based on your ingredients</p>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Saved Recipes Tab -->
    <div id="saved-recipes-content" class="tab-content hidden">
      <div class="tab-header">
        <h2 class="text-lg font-semibold text-gray-900">Saved Recipes</h2>
        <p class="mt-1 text-sm text-gray-500">Your collection of favorite recipes</p>
      </div>

      <div id="auth-required-message" class="p-6 text-center">
        <i class="fas fa-lock text-4xl text-gray-400 mb-4"></i>
        <p class="text-lg text-gray-600 mb-2">Please sign in to view your saved recipes</p>
        <button id="auth-login-btn" class="flex items-center gap-2 mx-auto bg-blue-600 text-white rounded-lg px-4 py-2 text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
          <i class="fas fa-sign-in-alt"></i>
          Sign in with Google
        </button>
      </div>

      <div id="saved-recipes-container" class="hidden">
        <!-- Saved recipes will be loaded here -->
        <div class="p-6 text-center">
          <div class="loading-spinner mx-auto mb-4"></div>
          <p class="text-gray-500">Loading your saved recipes...</p>
        </div>
      </div>

      <div id="saved-recipes-empty" class="hidden p-6 text-center">
        <i class="fas fa-bookmark text-4xl text-gray-400 mb-4"></i>
        <p class="text-lg text-gray-600 mb-2">You haven't saved any recipes yet</p>
        <p class="text-gray-500">Get recipe suggestions and save your favorites to find them here</p>
      </div>

      <div id="saved-recipes-list" class="hidden divide-y divide-gray-200">
        <!-- Saved recipes will be displayed here -->
      </div>
    </div>
  </main>

  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <script>
    // DOM Elements
    const ingredientsList = document.getElementById('ingredients-list');
    const newIngredientName = document.getElementById('new-ingredient-name');
    const newIngredientQuantity = document.getElementById('new-ingredient-quantity');
    const newIngredientUnit = document.getElementById('new-ingredient-unit');
    const addIngredientBtn = document.getElementById('add-ingredient-btn');
    const inventoryTab = document.getElementById('inventory-tab');
    const suggestionsTab = document.getElementById('suggestions-tab');
    const savedRecipesTab = document.getElementById('saved-recipes-tab');
    const inventoryContent = document.getElementById('inventory-content');
    const suggestionsContent = document.getElementById('suggestions-content');
    const savedRecipesContent = document.getElementById('saved-recipes-content');
    const servingsSelect = document.getElementById('servings-select');
    const getRecipeBtn = document.getElementById('get-recipe-btn');
    const recipeContainer = document.getElementById('recipe-container');
    const savedRecipesList = document.getElementById('saved-recipes-list');
    const savedRecipesEmpty = document.getElementById('saved-recipes-empty');
    const authRequiredMessage = document.getElementById('auth-required-message');
    const savedRecipesContainer = document.getElementById('saved-recipes-container');
    const savedRecipeDetails = document.getElementById('saved-recipe-details');
    const loginContainer = document.getElementById('login-container');
    const profileContainer = document.getElementById('profile-container');
    const userName = document.getElementById('user-name');
    const userAvatar = document.getElementById('user-avatar');
    const logoutBtn = document.getElementById('logout-btn');
    const errorMessage = document.getElementById('error-message');
    const errorContainer = document.getElementById('error-container');
    
    // Auth state
    let currentUser = null;
    let authToken = null;

    // Tab switching
    inventoryTab.addEventListener('click', () => {
      inventoryTab.classList.add('border-blue-500', 'text-blue-600');
      suggestionsTab.classList.remove('border-blue-500', 'text-blue-600');
      savedRecipesTab.classList.remove('border-blue-500', 'text-blue-600');
      
      suggestionsTab.classList.add('border-transparent', 'text-gray-500');
      savedRecipesTab.classList.add('border-transparent', 'text-gray-500');
      
      inventoryContent.classList.remove('hidden');
      suggestionsContent.classList.add('hidden');
      savedRecipesContent.classList.add('hidden');
    });
    
    suggestionsTab.addEventListener('click', () => {
      suggestionsTab.classList.add('border-blue-500', 'text-blue-600');
      inventoryTab.classList.remove('border-blue-500', 'text-blue-600');
      savedRecipesTab.classList.remove('border-blue-500', 'text-blue-600');
      
      inventoryTab.classList.add('border-transparent', 'text-gray-500');
      savedRecipesTab.classList.add('border-transparent', 'text-gray-500');
      
      suggestionsContent.classList.remove('hidden');
      inventoryContent.classList.add('hidden');
      savedRecipesContent.classList.add('hidden');
    });
    
    savedRecipesTab.addEventListener('click', () => {
      savedRecipesTab.classList.add('border-blue-500', 'text-blue-600');
      inventoryTab.classList.remove('border-blue-500', 'text-blue-600');
      suggestionsTab.classList.remove('border-blue-500', 'text-blue-600');
      
      inventoryTab.classList.add('border-transparent', 'text-gray-500');
      suggestionsTab.classList.add('border-transparent', 'text-gray-500');
      
      savedRecipesContent.classList.remove('hidden');
      inventoryContent.classList.add('hidden');
      suggestionsContent.classList.add('hidden');
      
      // Load saved recipes if user is authenticated
      if (currentUser) {
        loadSavedRecipes();
      }
    });

    // Show error message
    function showError(message) {
      const errorContainer = document.getElementById('error-container');
      const errorMessage = document.getElementById('error-message');
      
      errorMessage.textContent = message;
      errorContainer.classList.remove('hidden');
      errorContainer.classList.remove('bg-blue-100', 'border-blue-200', 'text-blue-800');
      errorContainer.classList.remove('bg-green-100', 'border-green-200', 'text-green-800');
      errorContainer.classList.add('bg-red-100', 'border-red-200', 'text-red-800');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        errorContainer.classList.add('hidden');
      }, 5000);
    }
    
    // Show info message
    function showInfo(message) {
      const errorContainer = document.getElementById('error-container');
      const errorMessage = document.getElementById('error-message');
      
      errorMessage.textContent = message;
      errorContainer.classList.remove('hidden');
      errorContainer.classList.remove('bg-red-100', 'border-red-200', 'text-red-800');
      errorContainer.classList.remove('bg-green-100', 'border-green-200', 'text-green-800');
      errorContainer.classList.add('bg-blue-100', 'border-blue-200', 'text-blue-800');
      
      // No auto-hide for info messages
    }
    
    // Show success message
    function showSuccess(message) {
      const errorContainer = document.getElementById('error-container');
      const errorMessage = document.getElementById('error-message');
      
      errorMessage.textContent = message;
      errorContainer.classList.remove('hidden');
      errorContainer.classList.remove('bg-red-100', 'border-red-200', 'text-red-800');
      errorContainer.classList.remove('bg-blue-100', 'border-blue-200', 'text-blue-800');
      errorContainer.classList.add('bg-green-100', 'border-green-200', 'text-green-800');
      
      // Auto-hide after 3 seconds
      setTimeout(() => {
        errorContainer.classList.add('hidden');
      }, 3000);
    }

    // Local storage functions for ingredients - COMPLETELY REWRITTEN
    const LOCAL_STORAGE_KEY = 'chef_bot_ingredients';
    
    function getLocalIngredients() {
      try {
        const stored = localStorage.getItem(LOCAL_STORAGE_KEY);
        console.log('Getting local ingredients from storage:', stored);
        
        if (!stored) {
          console.log('No ingredients found in local storage');
          return [];
        }
        
        const ingredients = JSON.parse(stored);
        console.log('Parsed local ingredients:', ingredients);
        return Array.isArray(ingredients) ? ingredients : [];
      } catch (error) {
        console.error('Error getting local ingredients:', error);
        return [];
      }
    }

    function saveLocalIngredients(ingredients) {
      try {
        console.log('Saving ingredients to local storage:', ingredients);
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(ingredients));
        console.log('Ingredients saved to local storage');
      } catch (error) {
        console.error('Error saving local ingredients:', error);
        showError('Failed to save ingredients locally');
      }
    }

    function addLocalIngredient(ingredient) {
      try {
        console.log('Adding ingredient to local storage:', ingredient);
        const ingredients = getLocalIngredients();
        ingredients.push(ingredient);
        saveLocalIngredients(ingredients);
        console.log('Local ingredients after adding:', ingredients);
        return ingredient;
      } catch (error) {
        console.error('Error adding local ingredient:', error);
        showError('Failed to add ingredient locally');
        return ingredient;
      }
    }
    
    function deleteLocalIngredient(id) {
      try {
        console.log('Deleting ingredient from local storage:', id);
        const ingredients = getLocalIngredients();
        const filteredIngredients = ingredients.filter(ing => ing.id !== id);
        saveLocalIngredients(filteredIngredients);
        console.log('Local ingredients after deletion:', filteredIngredients);
      } catch (error) {
        console.error('Error deleting local ingredient:', error);
        showError('Failed to delete ingredient locally');
      }
    }

    function updateLocalIngredient(id, updates) {
      console.log('Updating local ingredient:', id, updates);
      try {
        const ingredients = getLocalIngredients();
        const index = ingredients.findIndex(i => i.id === id);
        if (index !== -1) {
          // Create updated ingredient with current timestamp
          ingredients[index] = { 
            ...ingredients[index], 
            ...updates,
            updated_at: new Date().toISOString()
          };
          saveLocalIngredients(ingredients);
          console.log('Local ingredient updated:', ingredients[index]);
          return ingredients[index];
        } else {
          console.warn('Ingredient not found in local storage:', id);
          return null;
        }
      } catch (error) {
        console.error('Error updating local ingredient:', error);
        return null;
      }
    }

    function deleteLocalIngredient(id) {
      const ingredients = getLocalIngredients();
      const newIngredients = ingredients.filter(i => i.id !== id);
      saveLocalIngredients(newIngredients);
    }

    // Sync local ingredients with server when user logs in
    function syncLocalIngredientsWithServer() {
      const localIngredients = getLocalIngredients();
      if (localIngredients.length === 0) return Promise.resolve([]);
      
      return fetch('/api/v1/ingredients/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify({
          ingredients: localIngredients.map(ing => ({
            name: ing.name,
            quantity: ing.quantity,
            unit: ing.unit,
            temp_id: ing.id
          }))
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to sync ingredients');
        }
        return response.json();
      })
      .then(syncedIngredients => {
        // Clear local ingredients after successful sync
        localStorage.removeItem('localIngredients');
        return syncedIngredients;
      });
    }

    // Load ingredients
    function loadIngredients() {
      ingredientsList.innerHTML = `
        <div class="p-6 text-center">
          <div class="loading-spinner mx-auto mb-4"></div>
          <p class="text-gray-500">Loading ingredients...</p>
        </div>
      `;

      // Fetch ingredients from API
      fetch('/api/v1/ingredients')
        .then(response => {
          if (!response.ok) {
            throw new Error(`Failed to load ingredients: ${response.status}`);
          }
          return response.json();
        })
        .then(ingredients => {
          // If server returns empty array and user is not authenticated,
          // load from local storage instead
          if (ingredients.length === 0) {
            if (!currentUser) {
              const localIngredients = getLocalIngredients();
              if (localIngredients.length > 0) {
                renderIngredients(localIngredients);
                return;
              }
            }
            
            ingredientsList.innerHTML = `
              <div class="empty-state">
                <i class="fas fa-shopping-basket text-4xl mb-4"></i>
                <p>No ingredients yet. Add some to get started!</p>
              </div>
            `;
            return;
          }

          // Render the ingredients
          renderIngredients(ingredients);

          // Add event listeners to the newly created elements
          document.querySelectorAll('.ingredient-item').forEach(item => {
            const id = item.dataset.id;
            const unitSelect = item.querySelector('.unit-select');
            const deleteBtn = item.querySelector('.delete-btn');
            const quantityInput = item.querySelector('.quantity-input');
            
            quantityInput.addEventListener('change', (e) => updateIngredientQuantity(id, parseFloat(e.target.value)));
            unitSelect.addEventListener('change', (e) => updateUnit(id, e.target.value));
            deleteBtn.addEventListener('click', () => deleteIngredient(id));
          });
        })
        .catch(error => {
          showError(error.message);
          ingredientsList.innerHTML = `
            <div class="empty-state">
              <i class="fas fa-exclamation-circle text-red-500 text-4xl mb-4"></i>
              <p>Failed to load ingredients: ${error.message}</p>
              <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg" onclick="loadIngredients()">
                Try Again
              </button>
            </div>
          `;
        });
    }

    // Update ingredient quantity
    function updateQuantity(id, newQuantityValue) {
      // This function is now a wrapper for updateIngredientQuantity
      // for backward compatibility
      updateIngredientQuantity(id, parseFloat(newQuantityValue));
    }

    // Update ingredient unit
    function updateUnit(id, unit) {
      const item = document.querySelector(`.ingredient-item[data-id="${id}"]`);
      const quantityInput = item.querySelector('.quantity-input');
      
      // Check if this is a local ingredient (ID starts with temp_)
      if (id.startsWith('temp_')) {
        // Update in local storage
        updateLocalIngredient(id, {
          quantity: parseFloat(quantityInput.value),
          unit: unit
        });
        return;
      }
      
      fetch(`/api/v1/ingredients/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': authToken ? `Bearer ${authToken}` : ''
        },
        body: JSON.stringify({
          quantity: parseFloat(quantityInput.value),
          unit: unit
        })
      })
      .catch(error => {
        showError(error.message);
      });
    }

    // Delete ingredient
    function deleteIngredient(id) {
      // Check if this is a local ingredient (ID starts with temp_)
      if (id.startsWith('temp_')) {
        // Delete from local storage
        deleteLocalIngredient(id);
        loadIngredients();
        return;
      }
      
      fetch(`/api/v1/ingredients/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': authToken ? `Bearer ${authToken}` : ''
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to delete ingredient');
        }
        loadIngredients();
      })
      .catch(error => {
        showError(error.message);
      });
    }

    // Render ingredients helper function
    function renderIngredients(ingredients) {
      console.log('Rendering ingredients:', ingredients);
      
      // Handle empty or null ingredients array
      if (!ingredients || !Array.isArray(ingredients) || ingredients.length === 0) {
        console.log('No ingredients to render');
        ingredientsList.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-shopping-basket text-gray-300 text-5xl mb-4"></i>
            <p class="text-gray-500 mb-2">No ingredients yet</p>
            <p class="text-gray-400 text-sm">Add ingredients to get started</p>
          </div>
        `;
        return;
      }
      
      // Build HTML for ingredients list
      let html = '';
      ingredients.forEach(ingredient => {
        // Skip invalid ingredients
        if (!ingredient || !ingredient.name) {
          console.warn('Skipping invalid ingredient:', ingredient);
          return;
        }
        
        console.log('Rendering ingredient:', ingredient);
        html += `
          <div class="ingredient-item" data-id="${ingredient.id || 'unknown'}">
            <span class="ingredient-name">${ingredient.name}</span>
            <input 
              type="number" 
              class="quantity-input" 
              value="${ingredient.quantity || 1}" 
              min="0.1" 
              step="0.1" 
              style="width: 70px; padding: 8px 12px; border-radius: 8px; border: 1px solid #e5e7eb; text-align: center;"
            >
            <select class="unit-select">
              ${['pieces', 'grams', 'kg', 'ml', 'liters', 'cups', 'tbsp', 'tsp']
                .map(unit => `<option value="${unit}" ${unit === ingredient.unit ? 'selected' : ''}>${unit}</option>`)
                .join('')}
            </select>
            <button class="delete-btn">
              <i class="fas fa-times"></i>
            </button>
          </div>
        `;
      });
      
      // Update the DOM
      ingredientsList.innerHTML = html;
      console.log('Ingredients HTML rendered, count:', ingredients.length);

      // Add event listeners to the newly created elements
      document.querySelectorAll('.ingredient-item').forEach(item => {
        const id = item.dataset.id;
        const unitSelect = item.querySelector('.unit-select');
        const deleteBtn = item.querySelector('.delete-btn');
        const quantityInput = item.querySelector('.quantity-input');
        
        // For local ingredients (temp_*), use local storage functions
        if (id && id.toString().startsWith('temp_')) {
          quantityInput.addEventListener('change', (e) => {
            const newQuantity = parseFloat(e.target.value);
            const newUnit = unitSelect.value;
            updateLocalIngredient(id, { quantity: newQuantity, unit: newUnit });
          });
          
          unitSelect.addEventListener('change', (e) => {
            const newUnit = e.target.value;
            const currentQuantity = parseFloat(quantityInput.value);
            updateLocalIngredient(id, { quantity: currentQuantity, unit: newUnit });
          });
          
          deleteBtn.addEventListener('click', () => {
            deleteLocalIngredient(id);
            displayLocalIngredients();
          });
        } 
        // For server-side ingredients, use API functions
        else {
          quantityInput.addEventListener('change', (e) => updateIngredientQuantity(id, parseFloat(e.target.value)));
          unitSelect.addEventListener('change', (e) => updateUnit(id, e.target.value));
          deleteBtn.addEventListener('click', () => deleteIngredient(id));
        }
      });
      console.log('Event listeners attached to ingredient items');
    }

    // Add new ingredient - COMPLETELY REWRITTEN WITH DEBUG
    function addIngredient() {
      console.log('Adding ingredient...');
      const name = newIngredientName.value.trim();
      const quantity = parseFloat(newIngredientQuantity.value);
      const unit = newIngredientUnit.value;
      
      if (!name) {
        showError('Ingredient name is required');
        return;
      }
      
      if (isNaN(quantity) || quantity <= 0) {
        showError('Quantity must be a positive number');
        return;
      }
      
      console.log(`Adding ingredient: ${name}, ${quantity} ${unit}`);
      
      // For non-authenticated users, bypass the API and use local storage directly
      if (!currentUser) {
        console.log('User not authenticated, adding directly to local storage');
        const tempId = `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const newIngredient = {
          id: tempId,
          name: name,
          quantity: quantity,
          unit: unit,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        
        console.log('Created new ingredient object:', newIngredient);
        
        try {
          // Get current ingredients first
          const currentIngredients = getLocalIngredients();
          console.log('Current ingredients before adding:', currentIngredients);
          
          // Add directly to localStorage to bypass any potential issues with addLocalIngredient
          const updatedIngredients = [...currentIngredients, newIngredient];
          console.log('Updated ingredients array:', updatedIngredients);
          
          // Save directly to localStorage
          localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedIngredients));
          console.log('Saved to localStorage directly');
          
          // Verify it was added
          const verifyIngredients = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [];
          console.log('Verified ingredients after adding:', verifyIngredients);
          
          // Clear form fields
          newIngredientName.value = '';
          newIngredientQuantity.value = '1';
          newIngredientUnit.value = 'pieces';
          
          // Show success message
          showSuccess(`Added ${name} to your ingredients`);
          
          // Reload ingredients from local storage
          displayLocalIngredients();
        } catch (error) {
          console.error('Error saving to local storage:', error);
          showError(`Failed to add ingredient: ${error.message}`);
        }
        return;
      }
      
      // For authenticated users, use the API
      const headers = {
        'Content-Type': 'application/json'
      };
      
      if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`;
        console.log('Adding Authorization header for authenticated user');
      }
      
      console.log('Sending POST request to /api/v1/ingredients');
      fetch('/api/v1/ingredients', {
        method: 'POST',
        headers: headers,
        body: JSON.stringify({
          name,
          quantity,
          unit
        })
      })
      .then(response => {
        console.log('Response status:', response.status);
        if (!response.ok) {
          return response.text().then(text => {
            console.error('Error response:', text);
            try {
              const data = JSON.parse(text);
              throw new Error(data.detail || 'Failed to add ingredient');
            } catch (e) {
              throw new Error('Failed to add ingredient: ' + text);
            }
          });
        }
        return response.json();
      })
      .then(ingredient => {
        console.log('Ingredient added via API:', ingredient);
        
        // Clear form fields
        newIngredientName.value = '';
        newIngredientQuantity.value = '1';
        newIngredientUnit.value = 'pieces';
        
        // Show success message
        showSuccess(`Added ${name} to your ingredients`);
        
        // Reload ingredients from API
        loadIngredientsFromAPI();
      })
      .catch(error => {
        console.error('Error adding ingredient:', error);
        showError(error.message);
      });
    }

    // Get recipe suggestion
    function getRecipe() {
      const servings = servingsSelect.value;
      
      recipeContainer.innerHTML = `
        <div class="p-6 text-center">
          <div class="loading-spinner mx-auto mb-4"></div>
          <p class="text-gray-500">Generating recipe suggestions...</p>
        </div>
      `;
      
      fetch('/api/v1/recipes/suggest', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ servings: parseInt(servings) })
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.detail || 'Failed to get recipe suggestion');
          });
        }
        return response.json();
      })
      .then(recipe => {
        recipeContainer.innerHTML = `
          <div class="recipe-card">
            <div class="recipe-header">
              <h3 class="text-xl font-bold text-gray-900">${recipe.recipe_name}</h3>
              <div class="flex items-center gap-4 mt-2 text-sm text-gray-500">
                <div class="flex items-center">
                  <i class="fas fa-users mr-2"></i>
                  <span>Serves ${recipe.servings}</span>
                </div>
                <div class="flex items-center">
                  <i class="fas fa-clock mr-2"></i>
                  <span>${recipe.cooking_time} min</span>
                </div>
                <div class="flex items-center">
                  <i class="fas fa-chart-line mr-2"></i>
                  <span>${recipe.difficulty_level} difficulty</span>
                </div>
              </div>
              ${currentUser ? `
              <button id="save-recipe-btn" class="mt-4 flex items-center gap-2 bg-blue-600 text-white rounded-lg px-4 py-2 text-sm font-medium hover:bg-blue-700">
                <i class="fas fa-bookmark"></i> Save Recipe
              </button>
              ` : ''}
            </div>
            
            <div class="recipe-content">
              <div class="recipe-section">
                <h4>Ingredients</h4>
                <ul class="recipe-list">
                  ${recipe.ingredients_required.map(ingredient => `
                    <li>${ingredient}</li>
                  `).join('')}
                </ul>
              </div>
              
              ${recipe.missing_ingredients && recipe.missing_ingredients.length > 0 ? `
                <div class="recipe-section">
                  <h4 class="text-amber-600">Missing Ingredients</h4>
                  <ul class="recipe-list">
                    ${recipe.missing_ingredients.map(ingredient => `
                      <li class="missing-ingredient">${ingredient}</li>
                    `).join('')}
                  </ul>
                </div>
              ` : ''}
              
              <div class="recipe-section">
                <h4>Instructions</h4>
                <ol class="recipe-instructions">
                  ${recipe.instructions.map(step => `
                    <li>${step}</li>
                  `).join('')}
                </ol>
              </div>
            </div>
          </div>
        `;
        
        // Add event listener to save button if user is logged in
        if (currentUser) {
          document.getElementById('save-recipe-btn').addEventListener('click', saveCurrentRecipe);
        }
      })
      .catch(error => {
        showError(error.message);
        recipeContainer.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-exclamation-circle text-red-500 text-4xl mb-4"></i>
            <p>Failed to get recipe: ${error.message}</p>
            <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg" onclick="getRecipe()">
              Try Again
            </button>
          </div>
        `;
      });
    }

    // Google Auth 
    function initApp() {
      // Check if we have a stored auth token
      const storedToken = localStorage.getItem('authToken');
      const storedUser = localStorage.getItem('currentUser');
      
      if (storedToken && storedUser) {
        try {
          authToken = storedToken;
          currentUser = JSON.parse(storedUser);
          
          // Verify the token is still valid
          fetch('/api/v1/auth/me', {
            headers: {
              'Authorization': `Bearer ${authToken}`
            }
          }).then(response => {
            if (response.ok) {
              // Token is valid, update UI
              updateAuthUI(true);
            } else {
              // Token is invalid, clear storage
              localStorage.removeItem('authToken');
              localStorage.removeItem('currentUser');
              authToken = null;
              currentUser = null;
              updateAuthUI(false);
            }
          }).catch(error => {
            console.error('Error verifying token:', error);
            localStorage.removeItem('authToken');
            localStorage.removeItem('currentUser');
            authToken = null;
            currentUser = null;
            updateAuthUI(false);
          });
        } catch (error) {
          console.error('Error restoring auth state:', error);
          localStorage.removeItem('authToken');
          localStorage.removeItem('currentUser');
        }
      }
      
      // Initialize Google Sign-In
      google.accounts.id.initialize({
        client_id: '388047669391-9ebsa7q6h35udoa3jt8vfa3jr9sr8f84.apps.googleusercontent.com',
        callback: handleGoogleCredentialResponse
      });
      
      google.accounts.id.renderButton(
        document.getElementById('google-signin-button'),
        { theme: 'outline', size: 'large' }
      );
    }
    
    async function handleGoogleCredentialResponse(response) {
      try {
        console.log('Google credential response received');
        console.log('Credential data:', response);
        
        // Show loading state
        showInfo('Signing in with Google...');
        
        // Send the ID token to your server
        const result = await fetch('/api/v1/auth/google', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ token: response.credential }),
        });
        
        console.log('Auth response status:', result.status);
        
        // Get the response text first
        const responseText = await result.text();
        console.log('Auth response text:', responseText);
        
        if (!result.ok) {
          let errorMessage = 'Authentication failed';
          try {
            // Try to parse as JSON
            if (responseText.trim().startsWith('{')) {
              const errorData = JSON.parse(responseText);
              errorMessage = errorData.detail || errorMessage;
            } else {
              // If not JSON, use the response text or status
              errorMessage = responseText || `Server error: ${result.status}`;
            }
          } catch (e) {
            console.error('Error parsing error response:', e);
          }
          throw new Error(errorMessage);
        }
        
        // Parse the successful response
        let authData;
        try {
          authData = JSON.parse(responseText);
        } catch (e) {
          console.error('Error parsing auth response:', e);
          throw new Error('Invalid response format from server');
        }
        
        console.log('Auth successful:', authData);
        
        // Check if we have the expected data structure
        if (!authData.access_token || !authData.user) {
          console.error('Invalid auth data structure:', authData);
          throw new Error('Invalid authentication response format');
        }
        
        // Store auth data
        authToken = authData.access_token;
        currentUser = authData.user;
        
        // Save auth data to localStorage for persistence
        localStorage.setItem('authToken', authToken);
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        
        // Sync local ingredients with server if we have any
        const localIngredients = getLocalIngredients();
        if (localIngredients.length > 0) {
          showInfo('Syncing your ingredients...');
          try {
            await syncLocalIngredientsWithServer();
            showSuccess('Your ingredients have been synced!');
          } catch (error) {
            console.error('Error syncing ingredients:', error);
            showError('Failed to sync ingredients. Please try again later.');
          }
        }
        
        // Update UI for authenticated user
        updateAuthUI(true);
        showSuccess('Successfully signed in!');
        
        // Reload ingredients to get the server-stored ones
        loadIngredients();
        
        // If on saved recipes tab, load them
        if (!savedRecipesContent.classList.contains('hidden')) {
          loadSavedRecipes();
        }
      } catch (error) {
        console.error('Authentication error:', error);
        showError(`Authentication failed: ${error.message}`);
        updateAuthUI(false);
      }
    }
    
    function updateAuthUI(isAuthenticated) {
      if (isAuthenticated && currentUser) {
        // Show profile info
        loginContainer.classList.add('hidden');
        profileContainer.classList.remove('hidden');
        userName.textContent = currentUser.name;
        userAvatar.src = currentUser.picture || '';
        
        // Update saved recipes tab
        authRequiredMessage.classList.add('hidden');
        savedRecipesContainer.classList.remove('hidden');
        
        // Add save button to recipe if displayed
        const recipeCard = document.querySelector('.recipe-card');
        if (recipeCard && !document.getElementById('save-recipe-btn')) {
          const recipeHeader = recipeCard.querySelector('.recipe-header');
          const saveBtn = document.createElement('button');
          saveBtn.id = 'save-recipe-btn';
          saveBtn.className = 'mt-4 flex items-center gap-2 bg-blue-600 text-white rounded-lg px-4 py-2 text-sm font-medium hover:bg-blue-700';
          saveBtn.innerHTML = '<i class="fas fa-bookmark"></i> Save Recipe';
          saveBtn.addEventListener('click', saveCurrentRecipe);
          recipeHeader.appendChild(saveBtn);
        }
      } else {
        // Show login button
        loginContainer.classList.remove('hidden');
        profileContainer.classList.add('hidden');
        
        // Update saved recipes tab
        authRequiredMessage.classList.remove('hidden');
        savedRecipesContainer.classList.add('hidden');
        savedRecipesEmpty.classList.add('hidden');
        savedRecipesList.classList.add('hidden');
        
        // Remove save button from recipe if displayed
        const saveBtn = document.getElementById('save-recipe-btn');
        if (saveBtn) {
          saveBtn.remove();
        }
      }
    }
    
    function logout() {
      // Clear auth data
      authToken = null;
      currentUser = null;
      
      // Update UI
      updateAuthUI(false);
      
      // If on saved recipes tab, switch to inventory tab
      if (!savedRecipesContent.classList.contains('hidden')) {
        inventoryTab.click();
      }
    }
    
    // Saved Recipes Functions
    async function loadSavedRecipes() {
      if (!authToken) return;
      
      try {
        savedRecipesContainer.classList.remove('hidden');
        savedRecipesEmpty.classList.add('hidden');
        savedRecipesList.classList.add('hidden');
        
        const response = await fetch('/api/v1/saved-recipes', {
          headers: {
            'Authorization': `Bearer ${authToken}`
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Failed to load saved recipes');
        }
        
        const recipes = await response.json();
        
        if (recipes.length === 0) {
          // Show empty state
          savedRecipesContainer.classList.add('hidden');
          savedRecipesEmpty.classList.remove('hidden');
          return;
        }
        
        // Display recipes
        savedRecipesList.innerHTML = recipes.map(recipe => `
          <div class="p-6 border-b border-gray-200">
            <div class="flex justify-between items-start">
              <div>
                <h3 class="text-xl font-bold text-gray-900">${recipe.recipe_name}</h3>
                <div class="flex items-center gap-4 mt-2 text-sm text-gray-500">
                  <div class="flex items-center">
                    <i class="fas fa-users mr-2"></i>
                    <span>Serves ${recipe.servings}</span>
                  </div>
                  <div class="flex items-center">
                    <i class="fas fa-clock mr-2"></i>
                    <span>${recipe.cooking_time} min</span>
                  </div>
                  <div class="flex items-center">
                    <i class="fas fa-chart-line mr-2"></i>
                    <span>${recipe.difficulty_level} difficulty</span>
                  </div>
                </div>
              </div>
              <div class="flex gap-2">
                <button class="view-recipe-btn p-2 text-blue-600 hover:bg-blue-50 rounded-full" data-id="${recipe.id}">
                  <i class="fas fa-eye"></i>
                </button>
                <button class="delete-recipe-btn p-2 text-red-600 hover:bg-red-50 rounded-full" data-id="${recipe.id}">
                  <i class="fas fa-trash-alt"></i>
                </button>
              </div>
            </div>
            ${recipe.notes ? `<div class="mt-4 p-3 bg-gray-50 rounded-lg text-gray-700"><i class="fas fa-sticky-note mr-2 text-gray-400"></i>${recipe.notes}</div>` : ''}
          </div>
        `).join('');
        
        // Add event listeners to view and delete buttons
        document.querySelectorAll('.view-recipe-btn').forEach(btn => {
          btn.addEventListener('click', () => viewSavedRecipe(btn.dataset.id));
        });
        
        document.querySelectorAll('.delete-recipe-btn').forEach(btn => {
          btn.addEventListener('click', () => deleteSavedRecipe(btn.dataset.id));
        });
        
        savedRecipesContainer.classList.add('hidden');
        savedRecipesList.classList.remove('hidden');
      } catch (error) {
        showError(error.message);
        savedRecipesContainer.classList.add('hidden');
      }
    }
    
    async function saveCurrentRecipe() {
      console.log('Save recipe button clicked');
      if (!authToken) {
        showError('You must be logged in to save recipes');
        return;
      }
      
      // Check if token is expired or invalid
      try {
        // Verify token by making a request to the /me endpoint
        const userCheck = await fetch('/api/v1/auth/me', {
          headers: {
            'Authorization': `Bearer ${authToken}`
          }
        });
        
        if (!userCheck.ok) {
          // Token is invalid, try to refresh or re-login
          console.error('Authentication token is invalid or expired');
          authToken = null;
          currentUser = null;
          updateAuthUI(false);
          showError('Your session has expired. Please log in again.');
          return;
        }
      } catch (error) {
        console.error('Error checking authentication:', error);
        showError('Authentication error. Please try logging in again.');
        return;
      }
      
      try {
        const recipeCard = document.querySelector('.recipe-card');
        if (!recipeCard) {
          showError('No recipe found to save');
          return;
        }
        
        console.log('Recipe card found, extracting data...');
        
        const recipeName = recipeCard.querySelector('h3').textContent;
        const servingsText = recipeCard.querySelector('.fa-users').nextElementSibling.textContent;
        const servings = parseInt(servingsText.replace('Serves ', ''));
        const cookingTime = recipeCard.querySelector('.fa-clock').nextElementSibling.textContent.replace(' min', '');
        const difficultyLevel = recipeCard.querySelector('.fa-chart-line').nextElementSibling.textContent.replace(' difficulty', '');
        
        console.log('Basic recipe details:', { recipeName, servings, cookingTime, difficultyLevel });
        
        // Get ingredients
        const ingredientsRequired = [];
        recipeCard.querySelectorAll('.recipe-list:first-of-type li').forEach(li => {
          ingredientsRequired.push(li.textContent.trim());
        });
        
        // Get missing ingredients
        const missingIngredients = [];
        const missingIngredientsSection = recipeCard.querySelector('h4.text-amber-600');
        if (missingIngredientsSection) {
          missingIngredientsSection.parentElement.querySelectorAll('li').forEach(li => {
            missingIngredients.push(li.textContent.trim());
          });
        }
        
        // Get instructions
        const instructions = [];
        recipeCard.querySelectorAll('.recipe-instructions li').forEach(li => {
          instructions.push(li.textContent.trim());
        });
        
        console.log('Recipe details collected:', {
          ingredients: ingredientsRequired.length,
          missing: missingIngredients.length,
          instructions: instructions.length
        });
        
        const recipeData = {
          recipe_name: recipeName,
          ingredients_required: ingredientsRequired,
          missing_ingredients: missingIngredients,
          instructions: instructions,
          difficulty_level: difficultyLevel,
          cooking_time: cookingTime,
          servings: servings,
          notes: ''
        };
        
        console.log('Sending save recipe request...');
        
        const response = await fetch('/api/v1/saved-recipes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`
          },
          body: JSON.stringify(recipeData)
        });
        
        console.log('Save recipe response status:', response.status);
        
        if (!response.ok) {
          // Try to parse as JSON, but handle text response as well
          const responseText = await response.text();
          console.error('Error response text:', responseText);
          
          let errorMessage = 'Failed to save recipe';
          try {
            // Try to parse as JSON
            if (responseText.trim().startsWith('{')) {
              const errorData = JSON.parse(responseText);
              errorMessage = errorData.detail || errorMessage;
            } else {
              // If not JSON, use a generic error message
              errorMessage = 'Server error: ' + response.status;
            }
          } catch (parseError) {
            console.error('Error parsing error response:', parseError);
          }
          
          throw new Error(errorMessage);
        }
        
        // Parse the successful response
        const responseText = await response.text();
        console.log('Success response text:', responseText);
        
        let savedRecipe;
        try {
          savedRecipe = JSON.parse(responseText);
        } catch (parseError) {
          console.error('Error parsing success response:', parseError);
          throw new Error('Invalid response format from server');
        }
        console.log('Recipe saved successfully:', savedRecipe);
        
        // Update save button
        const saveBtn = document.getElementById('save-recipe-btn');
        saveBtn.innerHTML = '<i class="fas fa-check"></i> Recipe Saved';
        saveBtn.classList.remove('bg-blue-600', 'hover:bg-blue-700');
        saveBtn.classList.add('bg-green-600', 'hover:bg-green-700');
        saveBtn.disabled = true;
        
        // Show success message
        showSuccess('Recipe saved successfully!');
        
        setTimeout(() => {
          saveBtn.innerHTML = '<i class="fas fa-bookmark"></i> Save Recipe';
          saveBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
          saveBtn.classList.add('bg-blue-600', 'hover:bg-blue-700');
          saveBtn.disabled = false;
        }, 3000);
      } catch (error) {
        console.error('Error in saveCurrentRecipe:', error);
        showError(error.message);
      }
    }
    
    async function viewSavedRecipe(recipeId) {
      if (!authToken) return;
      
      try {
        const response = await fetch(`/api/v1/saved-recipes/${recipeId}`, {
          headers: {
            'Authorization': `Bearer ${authToken}`
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Failed to load recipe');
        }
        
        const recipe = await response.json();
        
        // Switch to suggestions tab and display recipe
        suggestionsTab.click();
        
        recipeContainer.innerHTML = `
          <div class="recipe-card">
            <div class="recipe-header">
              <h3 class="text-xl font-bold text-gray-900">${recipe.recipe_name}</h3>
              <div class="flex items-center gap-4 mt-2 text-sm text-gray-500">
                <div class="flex items-center">
                  <i class="fas fa-users mr-2"></i>
                  <span>Serves ${recipe.servings}</span>
                </div>
                <div class="flex items-center">
                  <i class="fas fa-clock mr-2"></i>
                  <span>${recipe.cooking_time} min</span>
                </div>
                <div class="flex items-center">
                  <i class="fas fa-chart-line mr-2"></i>
                  <span>${recipe.difficulty_level} difficulty</span>
                </div>
              </div>
              <button id="back-to-saved-btn" class="mt-4 flex items-center gap-2 bg-gray-600 text-white rounded-lg px-4 py-2 text-sm font-medium hover:bg-gray-700">
                <i class="fas fa-arrow-left"></i> Back to Saved Recipes
              </button>
            </div>
            
            <div class="recipe-content">
              <div class="recipe-section">
                <h4>Ingredients</h4>
                <ul class="recipe-list">
                  ${recipe.ingredients_required.map(ingredient => `
                    <li>${ingredient}</li>
                  `).join('')}
                </ul>
              </div>
              
              ${recipe.missing_ingredients && recipe.missing_ingredients.length > 0 ? `
                <div class="recipe-section">
                  <h4 class="text-amber-600">Missing Ingredients</h4>
                  <ul class="recipe-list">
                    ${recipe.missing_ingredients.map(ingredient => `
                      <li class="missing-ingredient">${ingredient}</li>
                    `).join('')}
                  </ul>
                </div>
              ` : ''}
              
              <div class="recipe-section">
                <h4>Instructions</h4>
                <ol class="recipe-instructions">
                  ${recipe.instructions.map(step => `
                    <li>${step}</li>
                  `).join('')}
                </ol>
              </div>
              
              ${recipe.notes ? `
                <div class="recipe-section">
                  <h4>Notes</h4>
                  <div class="p-3 bg-gray-50 rounded-lg text-gray-700">${recipe.notes}</div>
                </div>
              ` : ''}
            </div>
          </div>
        `;
        
        // Add event listener to back button
        document.getElementById('back-to-saved-btn').addEventListener('click', () => {
          savedRecipesTab.click();
        });
      } catch (error) {
        showError(error.message);
      }
    }
    
    async function deleteSavedRecipe(recipeId) {
      if (!authToken) return;
      
      if (!confirm('Are you sure you want to delete this recipe?')) return;
      
      try {
        const response = await fetch(`/api/v1/saved-recipes/${recipeId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${authToken}`
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Failed to delete recipe');
        }
        
        // Reload saved recipes
        loadSavedRecipes();
      } catch (error) {
        showError(error.message);
      }
    }
    
    // Event listeners
    addIngredientBtn.addEventListener('click', function(e) {
      e.preventDefault(); // Prevent form submission
      console.log('Add ingredient button clicked');
      addIngredient();
    });
    
    getRecipeBtn.addEventListener('click', getRecipe);
    logoutBtn.addEventListener('click', logout);
    
    // Debug event listener
    console.log('Add ingredient button:', addIngredientBtn);
    console.log('Event listener attached to Add button');
    
    // Enter key for adding ingredients
    newIngredientName.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        addIngredient();
      }
    });

    // Display local ingredients directly (no API call)
    function displayLocalIngredients() {
      console.log('Displaying local ingredients...');
      const localIngredients = getLocalIngredients();
      console.log('Local ingredients to display:', localIngredients);
      renderIngredients(localIngredients);
    }
    
    // Load ingredients from API (for authenticated users)
    async function loadIngredientsFromAPI() {
      try {
        console.log('Loading ingredients from API...');
        
        // Show loading state
        ingredientsList.innerHTML = `
          <div class="p-6 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <p class="text-gray-500">Loading ingredients...</p>
          </div>
        `;
        
        // Add Authorization header
        const headers = {};
        if (authToken) {
          headers['Authorization'] = `Bearer ${authToken}`;
        }
        
        const response = await fetch('/api/v1/ingredients/', {
          headers: headers
        });
        
        if (!response.ok) {
          throw new Error('Failed to load ingredients from API');
        }
        
        const ingredients = await response.json();
        console.log('Ingredients loaded from server:', ingredients);
        renderIngredients(ingredients);
      } catch (error) {
        console.error('Error loading ingredients from API:', error);
        showError('Failed to load ingredients: ' + error.message);
        ingredientsList.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-exclamation-circle text-red-500 text-4xl mb-4"></i>
            <p class="text-gray-500 mb-2">Failed to load ingredients</p>
            <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg" onclick="loadIngredients()">
              Try Again
            </button>
          </div>
        `;
      }
    }
    
    // Main load ingredients function - decides whether to use API or local storage
    async function loadIngredients() {
      console.log('Loading ingredients...');
      
      try {
        // Show loading state
        ingredientsList.innerHTML = `
          <div class="p-6 text-center">
            <div class="loading-spinner mx-auto mb-4"></div>
            <p class="text-gray-500">Loading ingredients...</p>
          </div>
        `;
        
        // If user is not logged in, use local storage
        if (!currentUser) {
          console.log('User not authenticated, using local storage');
          displayLocalIngredients();
          return;
        }
        
        // If user is logged in, use API
        console.log('User authenticated, loading from API');
        await loadIngredientsFromAPI();
      } catch (error) {
        console.error('Error loading ingredients:', error);
        ingredientsList.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-exclamation-circle text-red-500 text-5xl mb-4"></i>
            <p class="text-gray-500 mb-2">Failed to load ingredients</p>
            <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg" onclick="loadIngredients()">
              Try Again
            </button>
          </div>
        `;
      }
    }
    
    // Update ingredient quantity
    function updateIngredientQuantity(id, quantity) {
      const item = document.querySelector(`.ingredient-item[data-id="${id}"]`);
      const unitSelect = item.querySelector('.unit-select');
      
      // Check if this is a local ingredient (ID starts with temp_)
      if (id.startsWith('temp_')) {
        // Update in local storage
        updateLocalIngredient(id, {
          quantity: quantity,
          unit: unitSelect.value
        });
        return;
      }
      
      fetch(`/api/v1/ingredients/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': authToken ? `Bearer ${authToken}` : ''
        },
        body: JSON.stringify({
          quantity: quantity,
          unit: unitSelect.value
        })
      })
      .catch(error => {
        showError(error.message);
      });
    }
    
    // Delete ingredient
    async function deleteIngredient(id) {
      try {
        console.log(`Deleting ingredient ${id}`);
        const response = await fetch(`/api/v1/ingredients/${id}`, {
          method: 'DELETE'
        });
        
        if (!response.ok) {
          throw new Error('Failed to delete ingredient');
        }
        
        // Reload ingredients to reflect changes
        loadIngredients();
      } catch (error) {
        console.error('Error deleting ingredient:', error);
        showError(error.message);
      }
    }
    
    // Add a new ingredient
    async function addIngredient() {
      const name = newIngredientName.value.trim();
      const quantity = parseFloat(newIngredientQuantity.value) || 1;
      const unit = newIngredientUnit.value;
      
      if (!name) {
        showError('Please enter an ingredient name');
        return;
      }
      
      try {
        console.log(`Adding ingredient: ${name}, ${quantity} ${unit}`);
        const response = await fetch('/api/v1/ingredients/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: name,
            quantity: quantity,
            unit: unit
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'Failed to add ingredient');
        }
        
        // Clear input fields
        newIngredientName.value = '';
        newIngredientQuantity.value = '1';
        
        // Reload ingredients to show the new one
        loadIngredients();
      } catch (error) {
        console.error('Error adding ingredient:', error);
        showError(error.message);
      }
    }
    
    // Update ingredient unit
    async function updateUnit(id, newUnit) {
      try {
        console.log(`Updating ingredient ${id} unit to ${newUnit}`);
        const response = await fetch(`/api/v1/ingredients/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ unit: newUnit })
        });
        
        if (!response.ok) {
          throw new Error('Failed to update ingredient unit');
        }
        
        // No need to reload the entire list for a unit change
      } catch (error) {
        console.error('Error updating ingredient unit:', error);
        showError(error.message);
      }
    }

    // Initialize the app when the page loads
    window.onload = function() {
      initApp();
      // Load ingredients immediately
      loadIngredients();
    };
  </script>
</body>
</html>
